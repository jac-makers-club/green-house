// Activity_8_sep10a.ino

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Activity 8"
  https://create.arduino.cc/cloud/things/258e5b2a-da02-4857-9997-3117cdd80386 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool relay_2;
  float humidity;
  int light;
  float temperature;
  int moistValue;
  bool updateDisplay;
  bool relay_1;
  CloudColoredLight rgbColor;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "arduino_secrets.h"
#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>
MKRIoTCarrier carrier;

int moinstPin = A5;
int relayPin = 7;
String relayState1 = "";
String relayState2 = "";

int minMoisture = 700;
int maxMoisture = 1023;

void setup()
{
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1000);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  while (ArduinoCloud.connected() != 1)
  {
    ArduinoCloud.update();
    delay(500);
  }

  carrier.begin();
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, HIGH);
}

void loop()
{
  ArduinoCloud.update();

  int rawMoisture = analogRead(moinstPin);
  moistValue = map(rawMoisture, maxMoisture, minMoisture, 0, 100);

  temperature = carrier.Env.readTemperature();
  humidity = carrier.Env.readHumidity();

  if (carrier.Light.colorAvailable())
  {
    int noColor; // ints must be passed to readColor, even if only interested in light intensity
    carrier.Light.readColor(noColor, noColor, noColor, light);
  }

  carrier.Buttons.update();
  
  if (carrier.Button1.getTouch())
  {
    Serial.println("Button 1 Touched");
    onUpdateDisplayChange();
  }

  if (carrier.Button4.getTouch())
  {
    Serial.println("Button 4 Touched");
    // Toogle the value of relay_2
    relay_2 = relay_2 ? false : true;
    onRelay2Change();
    onUpdateDisplayChange();
  }

  delay(500);
}

void onRelay2Change()
{
  if (relay_2)
  {
    relayState2 = "ON";
    carrier.Relay2.open();
    Serial.println("relay 2 is ON");
    digitalWrite(relayPin, LOW);
  }
  else
  {
    relayState2 = "OFF";
    carrier.Relay2.close();
    digitalWrite(relayPin, HIGH);
    Serial.println("relay 2 is OFF");
  }
}

void onLightChange()
{
  // Not used
}

void onUpdateDisplayChange()
{
  carrier.display.fillScreen(ST77XX_WHITE);
  carrier.display.setTextColor(ST77XX_RED);
  carrier.display.setTextSize(2);

  carrier.display.setCursor(20, 30);
  carrier.display.print("Temp: ");
  carrier.display.print(temperature);
  carrier.display.print(" C");

  carrier.display.setCursor(20, 50);
  carrier.display.print("Humi: ");
  carrier.display.print(humidity);
  carrier.display.print(" %");

  carrier.display.setTextColor(ST77XX_ORANGE);
  carrier.display.setCursor(20, 70);
  carrier.display.print("Light: ");
  carrier.display.print(light);

  carrier.display.setTextColor(ST77XX_BLUE);
  carrier.display.setCursor(20, 90);
  carrier.display.print("Moist: ");
  carrier.display.print(moistValue);
  carrier.display.print(" %");

  carrier.display.setTextColor(ST77XX_BLUE);
  carrier.display.setCursor(20, 120);
  carrier.display.print("R1: ");
  carrier.display.print(relayState1);

  carrier.display.print(" R2: ");
  carrier.display.print(relayState2);

  updateDisplay = false;
}

void onRgbColorChange()
{
  uint8_t r, g, b;
  rgbColor.getValue().getRGB(r, g, b);
  if (rgbColor.getSwitch())
  {
    carrier.leds.fill(carrier.leds.Color(g, r, b), 0, 5);
    carrier.leds.show();
  }
  else
  {
    carrier.leds.fill(0, 0, 5);
    carrier.leds.show();
  }
}
